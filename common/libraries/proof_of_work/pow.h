/**
 * @file    pow.h
 * @author  Cypherock X1 Team
 * @brief   Title of the file.
 *          Short description of the file
 * @copyright Copyright (c) 2022 HODL TECH PTE LTD
 * <br/> You may obtain a copy of license at <a href="https://mitcc.org/"
 * target=_blank>https://mitcc.org/</a>
 *
 */
#ifndef POW_H
#define POW_H

/**
 * @file
 *
 * @brief Contains proof of work task and related function. The nonce, target
 * and random number are fetched from flash and are 32 byte array in big endian
 * form.
 *
 * @note 2^240 will be represented as
 * uint8_t arr[32] =
 * {0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
 *
 * @details
 * The target generated by card is in the form of 2^n for some 0<=n<256
 * This for easier calculation on both the sides.
 *
 * The challenge for the device is to find such a nonce such that
 * SHA256(Random || Nonce) < Target     --------------      (1)
 *
 * To crack this challenge the device iterates over different values of nonce
 * until the condition is satisfied.
 *
 * Device sets the nonce to 0 when the challenge is started. @see flash_struct.c
 *
 * The nonce is provided to the card which verifies condition (1). If the
 * condition is satisfied it gets unlocked and corresponding status word is
 * returned.
 *
 * The approx time left and current nonce is stored in flash and updated
 * periodically.
 */

/*****************************************************************************
 * INCLUDES
 *****************************************************************************/
#include <string.h>

#include "app_error.h"
#include "board.h"
#include "byte_utilities.h"
#include "flash_api.h"
#include "sha2.h"
#include "ui_text_slideshow.h"

/*****************************************************************************
 * MACROS AND DEFINES
 *****************************************************************************/
#define SHA256_SIZE 32
#define POW_RAND_NUMBER_SIZE 32
#define POW_NONCE_SIZE 32
#define POW_TIMER_MS 180000

/*****************************************************************************
 * TYPEDEFS
 *****************************************************************************/

/*****************************************************************************
 * EXPORTED VARIABLES
 *****************************************************************************/

/*****************************************************************************
 * GLOBAL FUNCTION PROTOTYPES
 *****************************************************************************/
/**
 * This is in hashes per second adjusted with 5% delay (50ms delay in each event
 * loop) b/w each hash. Recorded hash rate is approx 7775 hashes per second in
 * internal tests.
 */
extern size_t pow_hash_rate;

/**
 * @brief Initializes the application with hash rate capacity of the device.
 * @details This function must be called when the application is started. It is
 * necessary that the hash rate is initialized before the proof of work is
 * started. The best way to do this is to call this function during the
 * application start up.
 */
void pow_init_hash_rate();

/**
 * @brief This function is called from controller to start
 * proof of work task when wallet name is clicked and
 * the corresponding wallet is locked.
 * @details
 *
 * @param [in] name     Name of the wallet i.e. locked
 *
 * @return
 * @retval
 *
 * @see
 * @since v1.0.0
 *
 * @note
 */
void start_proof_of_work_task(const char *name);

/**
 * @brief Stops the proof of work task. Called when challenge is completed
 * @details
 *
 * @param
 *
 * @return
 * @retval
 *
 * @see
 * @since v1.0.0
 *
 * @note
 */
void stop_proof_of_work_task();

/**
 * @brief The function performs a proof-of-work task by repeatedly hashing a
 * combination of a random number and a nonce until a target value is found.
 *
 * @return true if the proof of work is completed and a valid nonce is found
 * else false
 */
bool proof_of_work_task();

/**
 * @brief Get current nonce being used by the proof of work module.
 * @details
 *
 * @param
 *
 * @return A byte array in big endian form.
 * @retval
 *
 * @see
 * @since v1.0.0
 *
 * @note This nonce can directly be sent to the card.
 */
uint8_t *get_proof_of_work_nonce();

#endif